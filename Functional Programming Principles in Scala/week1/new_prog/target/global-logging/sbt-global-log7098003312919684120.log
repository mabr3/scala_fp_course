[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\mabrogueirarodrigues\AppData\Local\Temp\idea10.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\mabrogueirarodrigues\AppData\Local\Temp\idea10.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_281)
[debug]       Load.loadUnit: plugins took 246.2546ms
[debug]       Load.loadUnit: defsScala took 0.5097ms
[debug] [Loading] Scanning directory C:\Users\mabrogueirarodrigues\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mabrogueirarodrigues\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 71.5724 ms
[debug]           Load.resolveProject(global-plugins) took 129.9703ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\mabrogueirarodrigues\.sbt\1.0\plugins, plugins: List(<none>))) took 250.195ms
[debug] [Loading] Done in C:\Users\mabrogueirarodrigues\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 293.7152ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.5966ms
[debug]     Load.loadUnit(file:/C:/Users/mabrogueirarodrigues/.sbt/1.0/plugins/, ...) took 555.3972ms
[debug]   Load.apply: load took 913.8808ms
[debug]   Load.apply: resolveProjects took 15.1398ms
[debug]   Load.apply: finalTransforms took 124.0336ms
[debug]   Load.apply: config.delegates took 17.8718ms
[debug]   Load.apply: Def.make(settings)... took 1794.4585ms
[debug]   Load.apply: structureIndex took 373.4004ms
[debug]   Load.apply: mkStreams took 2.7451ms
[info] loading global plugins from C:\Users\mabrogueirarodrigues\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 8973.9809ms
[debug]           Load.loadUnit: plugins took 235.7585ms
[debug]           Load.loadUnit: defsScala took 0.0082ms
[debug] [Loading] Scanning directory C:\Users\mabrogueirarodrigues\Desktop\Scala\new_prog\project
[debug]             Load.loadUnit: mkEval took 23.0317ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mabrogueirarodrigues\Desktop\Scala\new_prog\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.4784 ms
[info] loading settings for project new_prog-build from idea10.sbt ...
[debug]               Load.resolveProject(new_prog-build) took 88.9637ms
[debug]             Load.loadTransitive: finalizeProject(Project(id new_prog-build, base: C:\Users\mabrogueirarodrigues\Desktop\Scala\new_prog\project, plugins: List(<none>))) took 93.8747ms
[debug] [Loading] Done in C:\Users\mabrogueirarodrigues\Desktop\Scala\new_prog\project, returning: (new_prog-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 8122.6287ms
[debug]           Load.loadUnit: cleanEvalClasses took 13.6896ms
[debug]         Load.loadUnit(file:/C:/Users/mabrogueirarodrigues/Desktop/Scala/new_prog/project/, ...) took 8377.8627ms
[debug]       Load.apply: load took 8382.4218ms
[debug]       Load.apply: resolveProjects took 0.283ms
[debug]       Load.apply: finalTransforms took 84.1512ms
[debug]       Load.apply: config.delegates took 0.7245ms
[debug]       Load.apply: Def.make(settings)... took 271.1786ms
[debug]       Load.apply: structureIndex took 80.6616ms
[debug]       Load.apply: mkStreams took 0.0043ms
[info] loading project definition from C:\Users\mabrogueirarodrigues\Desktop\Scala\new_prog\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 14342.4089ms
[debug]     Load.loadUnit: defsScala took 0.0075ms
[debug] [Loading] Scanning directory C:\Users\mabrogueirarodrigues\Desktop\Scala\new_prog
[debug]       Load.loadUnit: mkEval took 0.579ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\mabrogueirarodrigues\Desktop\Scala\new_prog, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.7302 ms
[info] loading settings for project new_prog from build.sbt ...
[debug]         Load.resolveProject(new_prog) took 171.6325ms
[debug]       Load.loadTransitive: finalizeProject(Project(id new_prog, base: C:\Users\mabrogueirarodrigues\Desktop\Scala\new_prog, plugins: List(<none>))) took 178.3162ms
[debug] [Loading] Done in C:\Users\mabrogueirarodrigues\Desktop\Scala\new_prog, returning: (new_prog)
[debug]     Load.loadUnit: loadedProjectsRaw took 3419.5895ms
[debug]     Load.loadUnit: cleanEvalClasses took 108.4802ms
[debug]   Load.loadUnit(file:/C:/Users/mabrogueirarodrigues/Desktop/Scala/new_prog/, ...) took 17872.0558ms
[debug] Load.apply: load took 17881.0501ms
[debug] Load.apply: resolveProjects took 0.153ms
[debug] Load.apply: finalTransforms took 129.2735ms
[debug] Load.apply: config.delegates took 1.0489ms
[debug] Load.apply: Def.make(settings)... took 215.763ms
[debug] Load.apply: structureIndex took 46.8442ms
[debug] Load.apply: mkStreams took 0.0035ms
[info] set current project to new_prog (in build file:/C:/Users/mabrogueirarodrigues/Desktop/Scala/new_prog/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53066 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53066, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to new_prog (in build file:/C:/Users/mabrogueirarodrigues/Desktop/Scala/new_prog/)
[debug] > Exec(idea-shell, None, None)
[debug] > Exec(, None, None)
[debug] > Exec(idea-shell, None, None)
